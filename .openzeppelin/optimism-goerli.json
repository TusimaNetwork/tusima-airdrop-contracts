{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xE5c91Bd75D0aAB460924d48887F83AD4dEc5Ea05",
    "txHash": "0xb02859871640ef9f8009135a205f22c033f92546629153519383483b70b6c8d7"
  },
  "proxies": [
    {
      "address": "0xD58381876Fd09A516Eb0321bE1d1f1Fd10193ACC",
      "txHash": "0x4b517fb2f318a23938b33a998130a2d39c3aaedd0490a7cbf450cec5fdd0816f",
      "kind": "uups"
    },
    {
      "address": "0xd6E080e55CFE5952C0D260C07E9E921C5934db23",
      "txHash": "0xe27ee16f6fec6d6ba8b603416fd741785cf6da18cb919de7a26d7b17494e7764",
      "kind": "uups"
    },
    {
      "address": "0xc9643801C7DF891FCB62e40f1e9Ae88d934Ca3AC",
      "txHash": "0x3a554903a5a30c749a8b772d82fcabae8fc54c378e67143fc0f1898b5233364b",
      "kind": "transparent"
    },
    {
      "address": "0xf8D16150DE6fAb6e24Cd898cBfdE2280452a0882",
      "txHash": "0xeba0a8df16efab444662bab4c232bbc511312532af43d561f4f7101a7dd1c749",
      "kind": "transparent"
    }
  ],
  "impls": {
    "ddea7c7b5282b5bdf633f41328a762cbe9b0ed976190db84c16afe2f443c7c75": {
      "address": "0x06F59284792F30cf133045c02C1C37658e8765b1",
      "txHash": "0x36844e97cece32852ef9ecc91d9a35e0316b49a7ca34037e3ba0bd60ad85dbb6",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1967UpgradeUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:169"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "UUPSUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:111"
          },
          {
            "label": "currRound",
            "offset": 0,
            "slot": "201",
            "type": "t_uint8",
            "contract": "TusimaAirDrop",
            "src": "contracts/tusimaAirDrop.sol:14"
          },
          {
            "label": "tokenAddr",
            "offset": 1,
            "slot": "201",
            "type": "t_address",
            "contract": "TusimaAirDrop",
            "src": "contracts/tusimaAirDrop.sol:15"
          },
          {
            "label": "merkleRoot",
            "offset": 0,
            "slot": "202",
            "type": "t_bytes32",
            "contract": "TusimaAirDrop",
            "src": "contracts/tusimaAirDrop.sol:16"
          },
          {
            "label": "roundMap",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint8,t_struct(Round)6393_storage)",
            "contract": "TusimaAirDrop",
            "src": "contracts/tusimaAirDrop.sol:23"
          },
          {
            "label": "claimed",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
            "contract": "TusimaAirDrop",
            "src": "contracts/tusimaAirDrop.sol:24"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
            "label": "mapping(address => mapping(uint8 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_bool)": {
            "label": "mapping(uint8 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_struct(Round)6393_storage)": {
            "label": "mapping(uint8 => struct TusimaAirDrop.Round)",
            "numberOfBytes": "32"
          },
          "t_struct(Round)6393_storage": {
            "label": "struct TusimaAirDrop.Round",
            "members": [
              {
                "label": "start",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "end",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "dc3f05530e94c2b72bcb847f2eb86e3a9a6d94dc53b8c0476fceddd393e5495c": {
      "address": "0xF16E74DbB36a0e0dF0083A801a296Bb066e7503c",
      "txHash": "0xcb35b9ec5d920729dc3e706e03c00b1dc87409b3db5eeb4ed84f2ada12b68482",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "101",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)9881_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:260"
          },
          {
            "label": "_cap",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ERC20CappedUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20CappedUpgradeable.sol:15"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20CappedUpgradeable",
            "src": "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20CappedUpgradeable.sol:50"
          },
          {
            "label": "_burnEnabled",
            "offset": 0,
            "slot": "352",
            "type": "t_bool",
            "contract": "ERC20Base",
            "src": "contracts/token/governance/ERC20Base.sol:34"
          },
          {
            "label": "_transferEnabled",
            "offset": 1,
            "slot": "352",
            "type": "t_bool",
            "contract": "ERC20Base",
            "src": "contracts/token/governance/ERC20Base.sol:36"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)9881_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)9881_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
